{"version":3,"sources":["TodoData.js","Todo.js","TodoList.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["todoContext","createContext","TodoData","props","useState","todos","setTodos","dones","setDones","url","useEffect","a","async","fetch","res","json","data","console","log","getData","Provider","value","children","useStyles","makeStyles","theme","card","position","width","height","margin","marginBottom","background","color","header","subheader","marginTop","delete","top","left","check","title","textDecoration","titleS","textDecorationColor","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","Todo","useContext","todo","setTodo","classes","expanded","setExpanded","done","setDone","del","setDel","dbMethod","meth","method","response","Fade","in","timeout","Card","className","onClick","CardHeader","action","Checkbox","checked","onChange","_id","d","filter","t","setTimeout","Typography","variant","Date","deadline","toDateString","toLocaleTimeString","CardActions","disableSpacing","IconButton","aria-label","Dialog","open","onClose","DialogTitle","DialogActions","Button","deleteTodo","Collapse","unmountOnExit","CardContent","description","reminder","reminderTime","label","TodoList","React","map","head","key","fab","right","bottom","form","actions","text","AddTodo","setTitle","setDescription","now","setDeadline","setReminder","setReminderTime","setOpen","useTheme","fullScreen","useMediaQuery","breakpoints","down","postData","mode","cache","credentials","headers","redirect","referrer","body","JSON","stringify","handleClose","e","currentTarget","id","preventDefault","reminded","prevTodo","error","addTodo","Fab","PaperProps","style","backgroundColor","aria-labelledby","DialogContent","TextField","autoFocus","type","fullWidth","target","utils","DateFnsUtils","DateTimePicker","fontSize","fontFamily","textAlign","list","App","setHead","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cef6a05.chunk.js","sourcesContent":["import React,{useState,useEffect,createContext} from 'react'\r\n\r\nexport const todoContext = createContext();\r\n\r\nexport const TodoData = (props)=> {\r\n    const [todos, setTodos] = useState([]);\r\n    const [dones, setDones] = useState([]);\r\n\r\n    const url1 = 'https://akashdeeps19-todoserver.glitch.me';\r\n    const url = 'https://todo-akash.herokuapp.com';\r\n\r\n    useEffect(()=>{\r\n        getData();\r\n    },[]);\r\n\r\n    async function getData(){\r\n        let res = await fetch(url+'/events/todos');\r\n        let data = await res.json();\r\n        console.log(data);\r\n        setTodos(data);\r\n        res = await fetch(url+\"/events/dones\");\r\n        data = await res.json();\r\n        console.log(data);\r\n        setDones(data);\r\n    }\r\n    \r\n    return (\r\n        <todoContext.Provider value = {[todos,setTodos,dones,setDones]}>\r\n            {props.children}\r\n        </todoContext.Provider>\r\n    );\r\n}\r\n\r\n","import React, {useState,useContext} from 'react';\r\nimport {todoContext} from \"./TodoData\";\r\nimport { makeStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from '@material-ui/core/Button'\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        position: 'relative',\r\n        //display: 'flex',\r\n      width: '90%',\r\n      height: '5%',\r\n      margin : 'auto',\r\n      marginBottom : 10,\r\n      background : '#333',\r\n      color:'white'\r\n    },\r\n    header: {\r\n        position : 'relative',\r\n        //display : 'flex',\r\n    },\r\n    subheader: {\r\n        // position : 'absolute',\r\n        // top : 40,\r\n        // left : '10%',\r\n        marginTop : 15\r\n    },\r\n    delete:{\r\n        position : 'absolute',\r\n        top : 60,\r\n        left : '80%'\r\n    },\r\n    check: {\r\n      color:'white'\r\n    },\r\n    title: {\r\n        textDecoration : 'none'\r\n      },\r\n      titleS: {\r\n        textDecoration : 'line-through',\r\n        textDecorationColor : 'rgba(255,255,255,0.7)'\r\n      },\r\n    expand: {\r\n      transform: 'rotate(0deg)',\r\n      marginLeft: 'auto',\r\n      position : 'top',\r\n      transition: theme.transitions.create('transform', {\r\n        duration: theme.transitions.duration.shortest,\r\n      }),\r\n    },\r\n    expandOpen: {\r\n      transform: 'rotate(180deg)',\r\n    },\r\n}));\r\n\r\nexport default function Todo(props) {\r\n    const [todo, setTodo,dones,setDones] = useContext(todoContext);\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [done, setDone] = useState(false);\r\n    const [del, setDel] = useState(false);\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n    const transitionTime = 500;\r\n    const url1 = 'https://akashdeeps19-todoserver.glitch.me';\r\n    const url = 'https://todo-akash.herokuapp.com';\r\n    const updateTodo = async()=>{\r\n        \r\n        setDone(true);\r\n        const res = await dbMethod(`${url}/events/updateDone/${props.todo._id}&${!props.todo.done}`,'PATCH');\r\n        if(!props.todo.done){\r\n            const d = todo.filter(t => (t._id == props.todo._id));\r\n            d[0].done = true;\r\n            setDones([d[0],...dones])\r\n            const data = todo.filter(t => (t._id != props.todo._id));\r\n            setTimeout(()=>setTodo(data),transitionTime);\r\n        }\r\n        else{\r\n            const d = dones.filter(t => (t._id == props.todo._id));\r\n            d[0].done = false;\r\n            setTodo([d[0],...todo])\r\n            const data = dones.filter(t => (t._id != props.todo._id));\r\n            setTimeout(()=>setDones(data),transitionTime);\r\n        }\r\n        \r\n    }\r\n\r\n    const deleteTodo = async ()=>{\r\n        setDone(true);\r\n        const res = await dbMethod(`${url}/events/${props.todo._id}`,'DELETE');\r\n        if(!props.todo.done){\r\n            const data = todo.filter(t => (t._id != props.todo._id));;\r\n            setTimeout(()=>setTodo(data),transitionTime);\r\n        }\r\n        else{\r\n            const data = dones.filter(t => (t._id != props.todo._id));;\r\n            setTimeout(()=>setDones(data),transitionTime);\r\n        }\r\n    }\r\n\r\n    const dbMethod = async(url = '',meth = '')=> {\r\n        try{\r\n            const response = await fetch(url, {\r\n                method: meth,\r\n            });\r\n            return await response.json();\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n        }  \r\n    }\r\n\r\n    return(\r\n        \r\n        <Fade in = {!done} timeout = {transitionTime}>\r\n        <Card className={classes.card} onClick = {handleExpandClick}>\r\n            <CardHeader \r\n                className = {classes.header}\r\n                action={\r\n                    <Checkbox color = 'primary' checked = {props.todo.done} className = {classes.check} onChange = {updateTodo}></Checkbox>\r\n                }\r\n                title={\r\n                    <Typography className = {props.todo.done?classes.titleS:classes.title} variant = 'h5'>\r\n                        {props.todo.title}</Typography>\r\n                    }\r\n                subheader={\r\n                    <Typography className = {classes.subheader} variant = 'body2'>\r\n                    {new Date(props.todo.deadline).toDateString()+' '+new Date(props.todo.deadline).toLocaleTimeString('en-IN')}\r\n                    </Typography>}\r\n            />\r\n            <CardActions disableSpacing>\r\n                <IconButton className = {classes.delete}aria-label=\"delete\" onClick = {()=>setDel(true)}>\r\n                <DeleteOutline color = 'secondary' />\r\n                </IconButton>\r\n                <Dialog \r\n                    open = {del}\r\n                    onClose = {()=>setDel(false)}\r\n                    \r\n                >\r\n                    <DialogTitle>Delete?</DialogTitle>\r\n                    <DialogActions>\r\n                        <Button onClick = {()=>{setDel(false)}}>Cancel</Button>\r\n                        <Button onClick = {()=>{setDel(false);deleteTodo()}}>Delete</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </CardActions>\r\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                <CardContent>\r\n                <Typography>\r\n                    {props.todo.description}\r\n                </Typography>\r\n                <Typography>\r\n                    {props.todo.reminder?\r\n                    new Date(props.todo.reminderTime).toDateString()+' '+new Date(props.todo.reminderTime).toLocaleTimeString('en-IN'):\r\n                    'No reminder'\r\n                    }\r\n                </Typography>\r\n                <Typography>\r\n                    Label : {props.todo.label}\r\n                </Typography>\r\n                </CardContent>\r\n            </Collapse>\r\n        </Card>\r\n        </Fade>\r\n    );\r\n\r\n}\r\n","import React, { Component,useContext,useEffect } from 'react';\r\nimport {todoContext} from \"./TodoData\";\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = (props)=> {\r\n\r\n    const [todos,setTodos,done,setDone] = useContext(todoContext);\r\n    const [data, setData] = React.useState([]);\r\n\r\n    // useEffect(()=>{\r\n    //     setData(props.head === 'Todos'?todos:done);\r\n    // },[todos,done,props.head])\r\n    \r\n    return (\r\n        <div>\r\n            {todos.map(todo=>(\r\n            props.head === 'Todos' && <Todo key = {todo._id} todo = {todo}></Todo>\r\n        ))}\r\n        {done.map(todo=>(\r\n            props.head !== 'Todos' && <Todo key = {todo._id} todo = {todo}></Todo>\r\n        ))}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoList\r\n","import React, {useState,useContext} from 'react';\r\nimport {todoContext} from './TodoData';\r\nimport {DateTimePicker,MuiPickersUtilsProvider,} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { makeStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  fab: {\r\n      position: 'fixed',\r\n      //display: 'flex',\r\n      width: 55,\r\n      height: 55,\r\n      //left : '50%',\r\n      right : '40%',\r\n      bottom : '5%'\r\n  },\r\n  form : {\r\n    //position : \"absolute\",\r\n    margin : 0\r\n  },\r\n  actions : {\r\n    position : 'absolute',\r\n    bottom : '35%',\r\n    left : '45%'\r\n  },\r\n  text : {\r\n    color : 'white'\r\n  }\r\n}));\r\n\r\nexport default function AddTodo() {\r\n    const classes = useStyles();\r\n    const [todo,setTodo] = useContext(todoContext);\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [deadline, setDeadline] = useState(Date.now());\r\n    const [reminder, setReminder] = useState(true);\r\n    const [reminderTime, setReminderTime] = useState(Date.now());\r\n    const [label, setLabel] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const url1 = 'https://akashdeeps19-todoserver.glitch.me';\r\n    const url = 'https://todo-akash.herokuapp.com';\r\n    const addTodo = async (e)=>{\r\n        e.preventDefault();\r\n        const data = {\r\n            title : title,\r\n            description : description,\r\n            deadline : deadline,\r\n            done : false,\r\n            reminder : reminder,\r\n            reminderTime : reminderTime,\r\n            reminded : !reminder,\r\n            label : label\r\n        }\r\n        try{\r\n            const res = await postData(url+'/events',data);\r\n            setTodo(prevTodo => [res,...prevTodo]);\r\n            console.log(res);\r\n        }\r\n        catch(err){\r\n            console.error(err);\r\n        }\r\n\r\n    }\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n    const postData = async(url = '', data = {})=> {\r\n        const response = await fetch(url, {\r\n          method: 'POST',\r\n          mode: 'cors',\r\n          cache: 'no-cache',\r\n          credentials: 'same-origin', \r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          redirect: 'follow',\r\n          referrer: 'no-referrer',\r\n          body: JSON.stringify(data)\r\n        });\r\n        return await response.json();\r\n      }\r\n\r\n    const handleClose = (e)=>{\r\n        if(e.currentTarget.id == \"add\"){\r\n            addTodo(e);\r\n        }\r\n        setDeadline(Date.now());\r\n        setReminder(true);\r\n        setDescription('');\r\n        setTitle('');\r\n        setReminderTime(Date.now());\r\n        setOpen(!open);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n          <Fab className = {classes.fab}color=\"primary\" onClick={()=>setOpen(true)}>\r\n            <AddIcon/>\r\n          </Fab>\r\n          <Dialog fullScreen = {fullScreen}\r\n            PaperProps={{\r\n              style: {\r\n                backgroundColor: 'beige',\r\n              },\r\n            }} className = {classes.form} open={open} onClose={()=>setOpen(!open)} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle className = {classes.form} id=\"form-dialog-title\">Todo</DialogTitle>\r\n            <DialogContent className = {classes.form}>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"title\"\r\n                type=\"text\"\r\n                fullWidth\r\n                label = \"Title\"\r\n                value = {title}\r\n                color = 'textPrimary' \r\n                onChange = {e => setTitle(e.target.value)}\r\n              />\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"description\"\r\n                type=\"text\"\r\n                label = 'Descp'\r\n                fullWidth\r\n                color = 'white' \r\n                value = {description}\r\n                onChange = {e => setDescription(e.target.value)}\r\n              />\r\n              <MuiPickersUtilsProvider utils = {DateFnsUtils}>\r\n                    <DateTimePicker color = 'white'  value = {deadline} onChange = {setDeadline} label = \"Deadline\"/>\r\n                </MuiPickersUtilsProvider>\r\n            <Checkbox\r\n                value={reminder}\r\n                onChange = {e => setReminder(!reminder)}\r\n                checked = {reminder}\r\n                color = \"white\"\r\n            />\r\n            {reminder && \r\n            <MuiPickersUtilsProvider utils = {DateFnsUtils}>\r\n            <DateTimePicker color = 'white'  value = {reminderTime} onChange = {setReminderTime} label = \"Reminder\"/>\r\n            </MuiPickersUtilsProvider>\r\n            }\r\n            {/* <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"label\"\r\n                type=\"text\"\r\n                fullWidth\r\n                color = 'white' \r\n                value = {label}\r\n                label = 'Label'\r\n                onChange = {e => setLabel(e.target.value)}\r\n              /> */}\r\n            </DialogContent>\r\n            <DialogActions >\r\n              <Button color = 'white'id = 'cancel' onClick={e => handleClose(e)} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n              <Button color = 'white' id = \"add\" onClick={e =>handleClose(e)} color=\"primary\">\r\n                Add\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n      );\r\n}\r\n","import React from 'react';\nimport TodoList from './TodoList';\nimport {TodoData} from './TodoData';\nimport AddTodo from './AddTodo';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles} from '@material-ui/core/styles';\nimport './app.css'\n\nconst useStyles =makeStyles(theme => ({\n  head : {\n    backgroundColor : 'black', \n    height : 60,\n    width : '100%',\n    fontSize : 32,\n    color : 'white',\n    fontFamily : 'sans-serif',\n    textAlign : 'center',\n    position : 'fixed',\n    top : 0\n  },\n  list : {\n    position : 'absolute',\n    top : 65,\n    width : '100%',\n    background:'black'\n  },\n  text : {\n    top : 15\n  }\n  \n}));\n\nfunction App(){\n  const classes = useStyles()\n  const [head, setHead] = React.useState('Todos');\n\n  const handleClick = ()=>{\n    setHead(head == 'Todos'?'Done':'Todos');\n  }\n  return(\n    <div>\n      \n      <TodoData>\n      \n      <div className = {classes.list}>\n        <TodoList head = {head}/>\n        </div>\n        <AddTodo/>\n      </TodoData>\n      <div className = {classes.head}>\n      <Typography variant = 'h3' className = {classes.text} onClick = {handleClick}>{head}</Typography>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}